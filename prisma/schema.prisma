// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  PUBLIC
  PRIVATE // Donation Paused By Status
  INACTIVE
}

enum DonationStatus {
  REQUESTED
  AGREED
  DENIED
  CANCELED
}

enum BADGE {
  NEW
  PLATINUM
  SILVER
  GOLD
}

model BloodGroup {
  id        Int        @id @default(autoincrement())
  name      String
  users     User[]
  donations Donation[]
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @updatedAt @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id                 Int         @id @default(autoincrement())
  name               String?
  email              String?     @unique
  emailVerified      DateTime?   @map(name: "email_verified")
  phone              String?     @unique
  image              String?
  badge              BADGE       @default(NEW)
  latitude           Float?
  longitude          Float?
  bloodGroup         BloodGroup? @relation(fields: [bloodGroupId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  bloodGroupId       Int?        @map(name: "blood_group_id")
  donationFreequency Int         @default(3) @map(name: "donation_freequency") //donation freequency in months
  donatedAt          DateTime?   @map("donated_at")
  password           String?
  status             UserStatus  @default(PUBLIC)
  donations          Donation[]  @relation("donar")
  donationRequests   Donation[]  @relation("requestedBy")
  reviews            Review[]    @relation("reviewOn") // Review On Me
  reviewesOnOthers   Review[]    @relation("reviewer") // Review By Me
  createdAt          DateTime    @default(now()) @map(name: "created_at")
  updatedAt          DateTime    @updatedAt @map(name: "updated_at")

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Donation {
  id                 Int            @id @default(autoincrement())
  requestedBy        User           @relation("requestedBy", fields: [requestedById], references: [id], onUpdate: Cascade, onDelete: Restrict)
  requestedById      Int            @map("requested_by_id")
  donar              User           @relation("donar", fields: [donarId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  donarId            Int            @map("donar_id")
  // Blood Group Is needed because human blood group can change
  bloodGroup         BloodGroup     @relation(fields: [bloodGroupId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  bloodGroupId       Int            @map("blood_group_id")
  details            String
  collectionPointLat Float          @map("collection_point_lat")
  collectionPointLon Float          @map("collection_point_lon")
  status             DonationStatus @default(REQUESTED)
  reviews            Review[]
  createdAt          DateTime       @default(now()) @map(name: "created_at")
  updatedAt          DateTime       @updatedAt @map(name: "updated_at")

  @@map("donations")
}

model Review {
  id           Int      @id @default(autoincrement())
  donation     Donation @relation(fields: [donationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  donationId   Int      @map("donation_id")
  reviewer     User     @relation("reviewer", fields: [reviewerId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  reviewerId   Int      @map("reviewer_id")
  reviewOn     User     @relation("reviewOn", fields: [reviewerOnId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  reviewerOnId Int      @map("reviewer_on_id")
  rating       Int //Rating into 5
  comment      String?
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @updatedAt @map(name: "updated_at")

  @@map("reviews")
}
